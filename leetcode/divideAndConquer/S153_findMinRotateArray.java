package leetcode.divideAndConquer;

public class S153_findMinRotateArray {


    //
//    已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
//    若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
//    若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
//    注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。
//
//    给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。
//
//    你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
//    示例 1：
//    输入：nums = [3,4,5,1,2]
//    输出：1
//    解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
//    示例 2：
//
//    输入：nums = [4,5,6,7,0,1,2]
//    输出：0
//    解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。
//    示例 3：
//
//    输入：nums = [11,13,15,17]
//    输出：11
//    解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。

    // 二分查找可以解决这个问题 因为最小值后面是升序的 最小值前面也是升序的 最小值一定处于断崖处
    // 最小值 = 断崖处 或者 数组最左

    public int findMin(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
// 1. 找断崖处的最小值 mid有两种情况 mid要么在断崖左侧 要么在断崖右侧
        while(l<r){
            int mid = (l+r) / 2;
            // 如果mid大于最后一个元素 mid 一定在断崖左侧 因为左边数组最小值大于右边数组最大值
            if(nums[mid] > nums[nums.length-1]){
                r = mid;
            // mid  在断崖右侧 往左去找断崖处 最左即为断崖
            }else{
                l = mid + 1;
            }
        }
        if(l>=nums.length)
            return -1;
        return l;
    }




}
